Lab Assignment 1: Trainspotting
Group: 50
Participants: Hanyan Liu, Ilja Pavlov
Date: 2017-01-30


##########      Summary      ##########

In lab one we control two trains run simultaneously between two stations without colliding, derailing or causing rail switching issues. The control program for train instances is governed by 6 semaphores and 18 sensors. The main function that controls the switching behavior (sensorActivity()) is composed out of two parts, that describe traveling scenarios to the Northern or Southern stations, defined by the movement direction. Merging parts into one switch block was considered, but in the end it was deliberated that doing so would hinder code’s readability. The primary function of used binary semaphores is to assign the right of way to the default or single lanes, controlling the rail switches for alternative paths or making trains stop and wait until the critical section clears out.

Railroad diagram: https://i.imgur.com/iE55GBG.png

########## Critical Sections ##########

Critical sections cannot be occupied by more than one object at the same time. In our case: two train objects attempting to travel via railway without colliding with each one. To regulate this, movement interruptions would have to be implemented, forcing one of the trains to either wait, or take an alternative route as long as the other train occupies/uses the critical section. With two entities on the map and two effective lanes available, the use case for binary semaphores becomes a viable solution for regulating traffic. 

Through analysis of the map and provided requirements, we identified several critical sections, illustrated in the 'Semaphore Mapping' section of the diagram:

- STATION LANES: only one train can enter the lane before arriving to the station. If a second train attempt to access the same lane, it has to stop, reverse it’s movement and backtrack all the way to the middle lanes as to provide a safe way out for the first train. Both trains would also have to synchronize their speeds to prevent collision with each one. 

The rail switches allows us to prevent over-designing for such scenarios. To solve this problem we'll use a semaphore to define who gets the right to access the lane first. Trains that approach the station lane intersection will attempt to acquire the right of way: if granted, the train will enter the northern lane; otherwise they're redirected to the free lane to prevent the aforementioned scenario.

- CROSSROAD: a straightforward four way cross-intersection. One train would have to wait for the other one to pass, hence allowing us to implement a semaphore for this purposes, blocking / making trains wait for another one to pass through the intersection without collisions.

- SINGLE LANE: somewhat similar to the crossroad section, these lanes are critical, because multiple trains can not enter and pass them simultaneously without colliding each one. One train would have to wait (either from the station or middle lane side) while the other train crosses it. 

- MIDDLE LANES: the middle lane’s composed out of two lanes, hence the logic is much similar to the station lanes. With trains potentially traveling at different speeds, there’s a high chance for a collision to happen unless trains can synchronize their speed. As such, if the ‘fast’ lane is taken, the second train’d be redirected to the alternative lane.

With two train stations, two single lane sections and remaining critical sections, the map configuration leaves us with 6 semaphores:

1) STATION_LANE_NN: northern station's lanes, with the right of way assigned to northern lane.
2) CROSSROAD: regulates the four way intersection between northern station' lanes.
3) SINGLE_LANE_N: regulates the section between northern train station lanes and middle lanes.
4) FAST_LANE: controls the right of way between the fast and long middle lanes.
5) SINGLE_LANE_S: similar to 3.
6) STATION_LANE_SN: similar to 1.

##########      Sensors      ##########

To satisfy all required behaviors, we’ve tried sensors closely with the critical sections of the rail: surrounding the crossroad-intersection, putting sensors at the T-junction entry points of the lanes lanes (both station and middle lanes), as well as putting sensors at the end of station lines as to ensure proper arrival. The sensor placements were tested to allow a measure of distance between junctions to avoid derailment, collision and rail-switching-under-the-train scenarios. The placements and variable enumerations attached to individual sensors are illustrated in the diagram's  “Sensor Mapping” section.

##########   Maximum speed   ##########

The maximum speed for trains that was derived through experimentation is 22, though the speed of 20 stays more in line with the map's visuals. The speed would be set to maxspeed if the input is larger than 22. 
 
##########      Testing      ##########

Program testing was performed using multiple instances of the simulation with different train speeds. The first conditions that were tested were to identify the constraints and edge cases of our map setup, with train speeds set to 1,1 and MAX_SPEED. Max speed was identified to be 17. Both instances ran for 20 minutes without any issues. Further testing conditions were altered to have an accelerated simulation speed (set to 1), as well as varied station waiting time, with instances tested with the standard 2 second rule, as well as an altered variant of 100 ms, while running both tests for hours and overnight. In the end, 9 instances that were tested for the longest were:

#1 speed1:  1  speed2:  1  Simulation: 20
#2 speed1: 17  speed2: 17  Simulation: 20
#3 speed1:  5  speed2: 10  Simulation: 20
#4 speed1: 12  speed2: 17  Simulation: 10
#5 speed1: 17  speed2: 14  Simulation:  1
#6 speed1:  9  speed2: 17  Simulation: 10
#7 speed1:  4  speed2: 14  Simulation: 20
#8 speed1: 16  speed2:  8  Simulation:  1
#9 speed1:  1  speed2: 17  Simulation: 20

